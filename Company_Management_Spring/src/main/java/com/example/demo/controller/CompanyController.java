package com.example.demo.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import com.example.demo.DAO.CompanyRepository;
import com.example.demo.model.ListSpecificCompanyForm;
import com.example.demo.model.SearchCompanyForm;
import com.example.demo.model.Company;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/company_management") // This means URL's start with /company_management (after Application path)
public class CompanyController {
	@Autowired // This means to get the bean called companyRepository // Which is auto-generated by Spring, we will use it to handle the data
	private CompanyRepository companyRepository;

	@GetMapping(path = "/saveCompanyForm") // Map ONLY GET Requests
	public String showSaveCompanyForm(@ModelAttribute("company") Company companyForm) {
		System.out.println("Inside saveCompanyForm Get endpoint");
		// model.addAttribute("companyForm", new company());
		return "formCompany";
	}

	@PostMapping(path = "/saveCompany") // Map ONLY POST Requests
	public String addNewCompany(@Valid @ModelAttribute("company") Company companyForm, BindingResult bindingResult,
			Model model) {

		if (bindingResult.hasErrors()) {
			System.out.println("inside saveCompany form has errors");
			return "formCompany";
		} else {
			System.out.println("inside saveCompany form does NOT have errors");
			companyRepository.save(companyForm);

			model.addAttribute("successMessage", "New company successfully added");

			return "formCompany";
		}
	}

	@GetMapping(path = "/searchCompanyForm")
	public String showCompanySearchForm(@ModelAttribute("company") SearchCompanyForm companyForm) {
		System.out.println("Inside searchCompanyForm Get endpoint");
		return "searchCompany";
	}

	@PostMapping(path = "/searchCompany")
	public String searchCompany(@Valid @ModelAttribute("company") SearchCompanyForm companyForm, BindingResult bindingResult,
			Model model) {

		Company cmp;

		if (bindingResult.hasErrors()) {
			System.out.println("inside searchCompany form has errors");
			return "searchCompany";
		} else {
			System.out.println("inside searchCompany form does NOT have errors");

			if (companyForm.getIdcompany() != null) {
				cmp = companyRepository.findByidcompany(companyForm.getIdcompany());
			} else {
				cmp = companyRepository.findBycompanyName(companyForm.getCompany_name());
			}

			model.addAttribute("companies", cmp);

			return "companySearchResults";
		}
	}

	@GetMapping("/listCompany")
	public String getAllCompanies(Model model) {
		System.out.println("Inside listCompany endpoint");
		
		model.addAttribute("specificCompany", new ListSpecificCompanyForm());

		// System.out.println("All Companies "+companyRepository.findAll());

		model.addAttribute("companies", companyRepository.findAll());

		return "listCompany";
	}

	@RequestMapping("/listSpecificCompany")
	public String getSpecificCompany(@ModelAttribute ListSpecificCompanyForm specificCompany,
			@RequestParam(value = "idcompany", required = false) Integer idcompany,
			@RequestParam(value = "ListSelectedCompanyButton", required = false) String ListSelectedCompanyButton,
			Model model) {

		System.out.println("Inside listSpecificCompany endpoint");

		// If radio button selected
		if (specificCompany.getIdcompany() != null) {
			Integer cmp_id = specificCompany.getIdcompany();

			System.out.println("cmp_id = " + cmp_id);

			Company cmp = companyRepository.findByidcompany(cmp_id);

			if (cmp != null) {
				model.addAttribute("specificCompany", cmp);

				return "ListSpecificCompany";
			} else {
				System.out.println("Inside Company not found in DB");
				model.addAttribute("companyNotFound", "Given Company ID is incorrect");
				return "listCompany";
			}

		} else {// If radio button not selected
			System.out.println("in radio button not selected");
			// if Submit button was clicked without selecting a company radio button
			if (ListSelectedCompanyButton != null) {
				System.out.println("Inside RadiobuttonNotSelected");

				model.addAttribute("RadiobuttonNotSelected", "Please select a company");
				model.addAttribute("companies", companyRepository.findAll());
				model.addAttribute("specificCompany", new ListSpecificCompanyForm());

				return "listCompany";
			} else {
				// If view link was used instead of radio button

				System.out.println("idcompany = " + idcompany);

				Company cmp = companyRepository.findByidcompany(idcompany);

				if (cmp != null) {
					model.addAttribute("specificCompany", cmp);

					return "ListSpecificCompany";
				} else {
					System.out.println("Inside Company not found in DB");
					model.addAttribute("companyNotFound", "Given Company ID is incorrect");
					return "listCompany";
				}
			}
		}
	}
}
